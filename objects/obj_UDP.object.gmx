<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///README
/*
    This obj is to rapidly recieve unessacary packets
        -Packets that do not affect gameplay, but make the game
            look nicer
            
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup
if instance_number(obj_UDP)&gt;1{instance_destroy() exit}
// Create a server and listen on our broadcast port....
if instance_exists(obj_client){
    ServerPort=6512
    OtherPort=6513
}else{
    ServerPort=6513
    OtherPort=6512
}
global.broadcast_server2 = network_create_server( network_socket_udp, ServerPort, 100 );

if( global.broadcast_server2&lt;0 ){
    show_message("Could not create client!#restarting your game")
    game_restart()
}
buffer = buffer_create(256, buffer_fixed, 1)

global.UBuffer=buffer_create(256, buffer_fixed, 1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UpdateVars
pLight=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UpdateVars

//ROTATION
if instance_exists(obj_client2){
    with(obj_control){
        if PlayerMouseRot!=obj_client2.pPlayerMouseRot
        &amp;&amp; (mouse_check_button(mb_left) || gamepad_button_check(0,gp_shoulderrb) || gamepad_button_check(0,gp_shoulderlb)
        || mouse_check_button(mb_right)){
            obj_client2.pPlayerMouseRot=PlayerMouseRot
            uclearbuffer()
            uwritebyte(1)
            uwriteshort(PlayerMouseRot)
            usendmessage()
        }
    }
}


//Player x,y
if instance_exists(obj_player){
    with(obj_player){
        if (pup!=up)
        or pleft!=left
        or pright!=right{
            pup=up
            pleft=left
            pright=right
            uclearbuffer()
            uwritebyte(0)
            uwritebyte(left)
            uwritebyte(right)
            uwritebyte(up)
            uwriteshort(x)
            uwriteshort(y)
            usendmessage()
        }
    }
}


//Lightning Gun
if pLight!=round(obj_control.gun0charge/5)*5{
    pLight=round(obj_control.gun0charge/5)*5
    uclearbuffer()
    uwritebyte(2)
    uwritebyte(clamp(round(pLight),0,255))
    usendmessage()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UDP server code
var eventid = ds_map_find_value(async_load, "id");

if( eventid == global.broadcast_server2 )
{
    var ip = ds_map_find_value(async_load, "ip");
    // incoming data for the server from a connected saocket
    buffer = ds_map_find_value(async_load, "buffer");
    buffer_seek(buffer,buffer_seek_start,0)
    if global.connectip=ip{
        event_user(0)
    }
    
} 




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var msgid = readbyte()

switch( msgid ) {
    case 0:
        ucase_pos();
    break;
    
    case 1:
        ucase_rot();
    break;
    
    case 2:
        ucase_light()
    break;
    
    
    case 14:
        ucase_updateMonsters()
    break;
    
    case 24:
        global.GameClock=readdouble()
    break;
    
    ////PING////
    case 25:
        ucase_message_ping();
    break;
    case 26:
        ucase_message_ping2()
    break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
