<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_holder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OLD CODE
/*
offset_y=0
host=self.id;
next_rope=instance_create(x,y+offset_y,obj_gun7Rope)

poop=physics_joint_distance_create(host,next_rope,host.x,host.y,next_rope.x,next_rope.y,false)
physics_joint_set_value(poop,phy_joint_damping_ratio,1)
physics_joint_set_value(poop,phy_joint_frequency,10)

with(next_rope){
    parent=other.id
}

repeat(5){
    offset_y+=8
    last_rope=next_rope
    next_rope=instance_create(x,y+offset_y,obj_gun7Rope)
    
    link=physics_joint_distance_create(last_rope,next_rope,last_rope.x,last_rope.y,next_rope.x,next_rope.y,0)
    physics_joint_set_value(link,phy_joint_damping_ratio,1)
    physics_joint_set_value(link,phy_joint_frequency,10)
    
    
    with(next_rope){
        parent=other.last_rope
    }
}
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player=-1

xxstart=0
yystart=0

xx[0] = x 
yy[0] = y 
vel[0]=0


grav = 5 //gravity strenght
len = 10 //lenght of single segment on cloth
sg = 3 //numler of segments mentioned above

//creating variables of every segment's starting x and y position
i = 0 
repeat sg
{
i+=1
xx[i] = xx[0]
yy[i] = yy[0]
vel[i]=vel[0]
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_control)
&amp;&amp; instance_exists(player){
    x=player.x+lengthdir_x(10,obj_control.PlayerMouseRot)
    y=player.y+lengthdir_y(10,obj_control.PlayerMouseRot)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0;i&lt;=sg;i++){

    xxpre[i]=xx[i]
    yypre[i]=yy[i]
}

xxstart=x
yystart=y



dis = point_distance(xx[0],yy[0],xxstart,yystart)
dir = point_direction(xx[0],yy[0],xxstart,yystart)   

                                                  
                                    
var displacex=xxstart-xx[0];
var displacey=yystart-yy[0];
//show_message(tan(degtorad(clamp(displacey,0.000000000010,44)/clamp(displacex,0.001,9999))))
vel[0]=displacey/clamp(arcsin(clamp(tan(degtorad(clamp(displacey,0.000000000010,44)/clamp(displacex,0.001,9999))),-1,1)),.001,9999)

xx[0]+=vel[0]*cos(degtorad(dir))
yy[0]+=vel[0]*sin(degtorad(dir))                 


if dis &gt; len then                                     
   {                                                  
   xx[0]+= lengthdir_x(dis-len,dir)                   
   yy[0]+= lengthdir_y(dis-len,dir)                   
   }
yy[0] += 1;



i=0                                               
repeat sg                                             
{                                                     
i+=1                                                  
                                                      
dis = point_distance(xx[i],yy[i],xx[i-1],yy[i-1])     
dir = point_direction(xx[i],yy[i],xx[i-1],yy[i-1])
if i=sg{
    vel[i]=vel[i-1]//mean(vel[i],vel[i-1])
}else{
    vel[i]=vel[i-1]//mean(vel[i],vel[i+1],vel[i-1])
}

                                                    
                                           
                                                  
var displacex=(xxpre[i]-xx[i]);
var displacey=(yypre[i]-yy[i]);
vel[i]=tan(displacey/clamp(displacex,0.001,9999))                                      
xx[i]+=vel[i]*cos(degtorad(dir))
yy[i]+=vel[i]*sin(degtorad(dir))

yy[i] += i;                                       


if dis &gt; len then                                     
   {                                                  
   xx[i]+= lengthdir_x(dis-len,dir)                   
   yy[i]+= lengthdir_y(dis-len,dir)                   
   }      

if instance_exists(par_block){
c = instance_nearest(xx[i],yy[i],par_block) 


if yy[i]&gt;c.y
&amp;&amp; yy[i]&lt;c.y+16
{//&amp;&amp; point_distance(xx[i],yy[i],c.x+8,c.y+8)&lt;=16
    yy[i]=c.y
}
/*
//xColl
if yy[i]&gt;c.y
&amp;&amp; xx[i]&gt;c.x
&amp;&amp; xx[i]&lt;c.x+16{
    xx[i]=c.x
}         
  */                                                
                                                   
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_control){
    if obj_control.gunshovel=1{
        draw_set_colour(c_aqua)
        draw_set_alpha(1)
        var i=0;
        draw_line_width(x,y,xx[0],yy[0],3)
        repeat sg
        {          
        draw_line_width(xx[i],yy[i],xx[i+1],yy[i+1],3)
        i+=1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
