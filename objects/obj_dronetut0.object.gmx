<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monster4</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_tutdrone</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xx=x
yy=y
xxx=0
yyy=0

image_angle2=0
path=-1
path_point=0
path_point2=0
palarm=1
image_speed=0.25


__x=0
__y=0

image_xscale=0.5
image_yscale=0.5

maxpoints=4
pointpathon=0
pointpath[0,0]=120
pointpath[0,1]=32+32

pointpath[1,0]=184
pointpath[1,1]=32+16

pointpath[2,0]=304-16
pointpath[2,1]=32+32

pointpath[3,0]=224
pointpath[3,1]=56

x=pointpath[0,0]
y=pointpath[0,1]
event_user(1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1]=1
if alarm[0]=-1{alarm[0]=1}
if alarm[0]&gt;room_speed{alarm[0]=1}

if hspeed&lt;0.1 &amp;&amp; hspeed&gt;-0.1
&amp;&amp; vspeed&lt;0.1 &amp;&amp; vspeed&gt;-0.1{
    if path_point&lt;path_get_number(path){
        path_point+=1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if path_point&lt;path_get_number(path)
{
    if path_point&lt;0{path_point=0}
    if collision_line(x,y,x+(hspeed*25),y+(vspeed*25),par_block,0,0)&gt;0
    or collision_line(x,y,x+(sin(degtorad(point_direction(x,y,x+(hspeed*25),y+abs(vspeed*25))+45))*abs(hspeed*25)),
    y+(cos(degtorad(point_direction(x,y,x+(hspeed*25),y+(vspeed*25))+45))*abs(vspeed*25)),par_block,0,0)&gt;0
    or collision_line(x,y,x+(sin(degtorad(point_direction(x,y,x+(hspeed*15),y+(vspeed*25))+135))*abs(hspeed*25)),
    y+(cos(degtorad(point_direction(x,y,x+(hspeed*25),y+(vspeed*25))+135))*abs(vspeed*25)),par_block,0,0)&gt;0
    
    {
        //path_point-=1
        alarm[0]=(point_distance(path_get_point_x(path,path_point),path_get_point_y(path,path_point),x,y)/15)+1
        palarm=(point_distance(path_get_point_x(path,path_point),path_get_point_y(path,path_point),x,y)/25)+1
    }else{
        alarm[0]=(point_distance(path_get_point_x(path,path_point),path_get_point_y(path,path_point),x,y)/150)+1
        palarm=(point_distance(path_get_point_x(path,path_point),path_get_point_y(path,path_point),x,y)/10)+1
    }
    
    
    xx=path_get_point_x(path,path_point)
    yy=path_get_point_y(path,path_point)
    
    if path_point&gt;0{
        if (point_distance(path_get_point_x(path,path_point-1),path_get_point_y(path,path_point-1),x,y)&lt;palarm*7){
            path_point+=1
        }else{
            //path_point-=1
        }
    }else{
        path_point+=1  
    }
    
    
}else{
    if !path_exists(path){
        while(!place_empty(xx,yy)){
            xx=xx+(irandom_range(-5,5))
            yy=yy+(irandom_range(-5,5))
            if point_distance(xx,yy,x,y)&gt;75{xx=x yy=y}
        }
        
    }else{
        path_delete(path)
    }
    alarm[1]=-1

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if alarm[0]!=-1{
    if (!place_free(x+hspeed,y) &amp;&amp; !place_free(x,y+vspeed))
    or (!place_free(x+hspeed,y) &amp;&amp; (vspeed&lt;0.1 &amp;&amp; vspeed&gt;-0.1))
    or (!place_free(x,y+vspeed) &amp;&amp; (hspeed&lt;0.1 &amp;&amp; hspeed&gt;-0.1)){
        path_point-=15
        alarm[0]=30
        xx=path_get_point_x(path,path_point)
        yy=path_get_point_y(path,path_point)
    }
}

if !place_free(x+hspeed,y){hspeed=0}
if !place_free(x,y+vspeed){vspeed=0}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if pointpathon&lt;=maxpoints{
while(!place_free(xx,yy)){//&amp;&amp; checkplace()=false
    xx=xx+(irandom_range(-5,5))
    yy=yy+(irandom_range(-5,5))
    if point_distance(xx,yy,x,y)&gt;75{xx=x yy=y}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if point_distance(x,y,xprevious,yprevious)&gt;150{
    x=xprevious
    y=yprevious
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if pointpathon&lt;=maxpoints{
xxx=point_distance(xx,y,x,y)/15
yyy=point_distance(x,yy,x,y)/15

if x&gt;xx{
    xxx=xxx*-1
}
if y&gt;yy{
    yyy=yyy*-1
}

hspeed+=(xxx-hspeed)/3
vspeed+=(yyy-vspeed)/3
if collision_line(x,y,x+(hspeed*25),y+(vspeed*25),par_block,0,0)&gt;0
or collision_line(x,y,x+(sin(degtorad(point_direction(x,y,x+(hspeed*25),y+abs(vspeed*25))+45))*abs(hspeed*25)),
y+(cos(degtorad(point_direction(x,y,x+(hspeed*25),y+(vspeed*25))+45))*abs(vspeed*25)),par_block,0,0)&gt;0
or collision_line(x,y,x+(sin(degtorad(point_direction(x,y,x+(hspeed*15),y+(vspeed*25))+135))*abs(hspeed*25)),
y+(cos(degtorad(point_direction(x,y,x+(hspeed*25),y+(vspeed*25))+135))*abs(vspeed*25)),par_block,0,0)&gt;0{
}

if hspeed&gt;15{hspeed=15}
if hspeed&lt;-15{hspeed=-15}
if vspeed&gt;15{vspeed=15}
if vspeed&lt;-15{vspeed=-15}


image_angle2=hspeed*-2
if image_angle2&gt;90{image_angle2=90}
if image_angle2&lt;-90{image_angle2=-90}


var _rep;
_rep=0
while(!place_free(x+hspeed,y) &amp;&amp; _rep&lt;15){hspeed=hspeed/2 _rep+=1}
_rep=0
while(!place_free(x,y+vspeed) &amp;&amp; _rep&lt;15){vspeed=vspeed/2 _rep+=1}

if hspeed!=0{
    if !place_free(x+hspeed/abs(hspeed),y){hspeed=0}
}
if vspeed!=0{
    if !place_free(x,y+vspeed/abs(vspeed)){vspeed=0}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (vspeed &gt; 0 or vspeed&lt;0) &amp;&amp; !place_free(x,y+vspeed)
{move_contact(270) vspeed=0 move_contact(90)}

if (hspeed &gt; 0 or hspeed&lt;0) &amp;&amp; !place_free(x+hspeed,y)
{move_contact(180) move_contact(0) hspeed=0}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message(pointpathon)
///regen the path
if pointpathon&lt;maxpoints{

    if path_exists(path){path_delete(path)}
    //calc best path
    grid=mp_grid_create(0,0,room_width/16,room_height/16,16,16);
    path=path_add();
    
    with(par_block){
        mp_grid_add_rectangle(other.grid,x-8,y-15,x+(sprite_width)+8,y+(sprite_height)+15)
    }
    //mp_grid_add_instances(grid, par_block, false); 
    
    mp_grid_path(grid,path,x,y,pointpath[pointpathon,0],pointpath[pointpathon,1],1);
    __x=mouse_x
    __y=mouse_y
    path_set_kind(path,1)
    path_set_closed(path,0)
    mp_grid_destroy(grid)
    path_point=0
    path_point2=path_get_number(path)
    alarm[0]=1
    alarm[1]=1
    
    if path_get_number(path)&lt;1{
        //look for options around
        if !place_meeting(x+2,y,par_block){x+=2}
        if !place_meeting(x-2,y,par_block){x-=2}
        if !place_meeting(x,y+2,par_block){y+=2}
        if !place_meeting(x,y-2,par_block){y-=2}
    }
    
    pointpathon+=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_dkgray)
draw_set_alpha(1)
draw_line_width(x,y,obj_signtut0.x-12,obj_signtut0.y-9,1)

draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle2,image_blend,image_alpha)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>7,9</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
