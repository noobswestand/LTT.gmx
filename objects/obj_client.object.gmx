<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_parts</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(obj_client)&gt;1 &amp;&amp; room!=rm_menu{instance_destroy() exit;}
instance_create(0,0,obj_UDP)
//first...connect

var Type , IPAddress , Port;
Type = network_socket_tcp;
Socket = network_create_socket( Type );
isConnected = network_connect( Socket , global.ServerIP , SERVERPORT );
if isConnected&lt;0{
    show_message("Could Not connect to the server!#Please Restart")
    game_end()
}

// Create a buffer for the network messages
buff = buffer_create(256, buffer_grow, 1);


var Size , Type , Alignment;
Size = 1024;
Type = buffer_fixed;
Alignment = 1;
global.Buffer = buffer_create( Size , Type , Alignment );


buffer=-1
int_playervars()

Ping=-1
global.clienttcp=Socket

alarm[0]=1
servername=""



if !file_exists("Settings.txt"){
    global.PlayerName=get_string("What is your name?#(Only used for online high scores)","")
    
    while(name_get_chars(global.PlayerName)=true){
        global.PlayerName=get_string("Invalid name.#Please don't use symbols","")
    }
    while(global.PlayerName=""){
        global.PlayerName=get_string("Invalid name.#Please actually enter something","")
    }
    
    file=file_text_open_write("Settings.txt")
    file_text_write_string(file,global.PlayerName)
    file_text_close(file)
}else{
    file=file_text_open_read("Settings.txt")
    global.PlayerName=file_text_read_string(file)
    var changed=false;
    while(global.PlayerName=""){
        global.PlayerName=get_string("Invalid name.#Please actually enter something","")
        changed=true
    }
    file_text_close(file)
    if changed=true{
        file=file_text_open_write("Settings.txt")
        file_text_write_string(file,global.PlayerName)
        file_text_close(file)
    }
}

ping_reply=0
ping_current2=0
alarm[2]=1

TPCcount=0
TPClast=0
TPCmsg=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ping
ping_current2=current_time

uclearbuffer()
uwritebyte(26)
uwritebyte(1)
usendmessage()

alarm[2]=room_speed*5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///login
clearbuffer()
writebyte(1)
writestring(global.PlayerName)
sendmessage(global.clienttcp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Async Networking Event of Object: ObjClient.
var type_event = ds_map_find_value( async_load , "type" );
var eventid = ds_map_find_value(async_load, "id");

if( eventid == global.clienttcp )
{
switch( type_event ) {
    case network_type_data:
    var buffer = ds_map_find_value( async_load , "buffer" );
    buffer_seek( buffer , buffer_seek_start , 0 );
    TPClast=ds_map_find_value(async_load, "size");
    if TPClast&gt;0{
        TPCcount++
        ReceivedPacket( buffer );
    }
    break;
}


}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_color(c_white)
draw_set_alpha(1)
draw_set_halign(fa_right)
draw_set_font(global.font0)
draw_text_ext_transformed(room_width-5,25,"Ping: "+string(ping_reply),0,9999,.5,.5,0)
if instance_exists(obj_client2){
    //draw_text_ext_transformed(room_width-5,35,+string(TPCcount),0,9999,.5,.5,0)
    //draw_text_ext_transformed(room_width-5,45,+string(TPCmsg),0,9999,.5,.5,0)
    //draw_text_ext_transformed(room_width-5,55,+string(obj_client2.gun0charge),0,9999,.5,.5,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,2</point>
    <point>2,2</point>
  </PhysicsShapePoints>
</object>
