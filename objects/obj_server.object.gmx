<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(obj_server)&gt;1 &amp;&amp; room!=rm_menu{instance_destroy() exit;}
instance_create(0,0,obj_UDP)
//Create Event of Object: ObjServer
var Type , Port , MaxClients;
Type = network_socket_tcp;
Port = 1224;
MaxClients = 255;

//create listening things
Server = network_create_server( Type , Port , MaxClients );
if( Server&lt;0 ){
    show_message("Could not create server!#restarting your game")
    game_restart()
}

var Size , Type , Alignment;
Size = 1024;
Type = buffer_grow ;
Alignment = 1;
global.Buffer = buffer_create( Size , Type , Alignment );

global.ServerName="LTT"

//sockets
SocketList = ds_list_create();
NumClients=0
for(i=0; i &lt; 255; i+=1){
    global.players[i,0] = -1;//ID
    global.players[i,1] = -1;//Socket
}

if !file_exists("Settings.txt"){
    global.PlayerName=get_string("What is your name?#(Only used for online high scores)","")
    
    while(name_get_chars(global.PlayerName)=true){
        global.PlayerName=get_string("Invalid name.#Please don't use symbols","")
    }
    while(global.PlayerName=""){
        global.PlayerName=get_string("Invalid name.#Please actually enter something","")
    }
    
    file=file_text_open_write("Settings.txt")
    file_text_write_string(file,global.PlayerName)
    file_text_close(file)
}else{
    file=file_text_open_read("Settings.txt")
    global.PlayerName=file_text_read_string(file)
    var changed=false;
    while(global.PlayerName=""){
        global.PlayerName=get_string("Invalid name.#Please actually enter something","")
        changed=true
    }
    file_text_close(file)
    if changed=true{
        file=file_text_open_write("Settings.txt")
        file_text_write_string(file,global.PlayerName)
        file_text_close(file)
    }
}
scr_servervars()
global.clienttcp=-1

alarm[1]=room_speed

ping_reply=0
ping_current2=0
alarm[2]=1
TPCcount=0
TPClast=0
TPCmsg=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///auto-find
broadcast_buffer = buffer_create(32, buffer_fixed, 1);

/*serverBroad = network_create_server(network_socket_tcp ,6510, 32 );
if( serverBroad&lt;0 ){
    show_message("Could not create client!#restarting your game")
    game_restart()
}
*/


// Setup a timer so we can broadcast the server IP out to local clients looking...
alarm[3]=60; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Broadcast
// our location occasionally. Clients pick this up and can then display servers to the user. 
if !instance_exists(obj_client2){
// Broadcast once a second...
alarm[3]=60;

buffer_seek( broadcast_buffer, buffer_seek_start, 0 );
buffer_write( broadcast_buffer, buffer_string, "o");
network_send_broadcast( Server, 6511, broadcast_buffer, buffer_tell(broadcast_buffer) );



}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ping
ping_current2=current_time

uclearbuffer()
uwritebyte(26)
//writebyte(1)
uwritedouble(round(obj_control.money/obj_control.moneyCheckMult))
usendmessage()


alarm[2]=room_speed*5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync clocks
if instance_exists(obj_client2){
    uclearbuffer()
    uwritebyte(24)
    uwritedouble(global.GameClock)
    usendmessage()
}



alarm[1]=room_speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update player
clearbuffer()
writebyte(3)
writebyte(global.char)
writeshort(obj_player.x)
writeshort(obj_player.y)
sendmessage(global.clienttcp)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///room control
if proom!=room &amp;&amp; room!=rm_menu{
    proom=room
    //show_message(room_get_name(room))
    //tell the client
    clearbuffer()
    writebyte(2)
    writeushort(room)
    sendmessage(global.clienttcp)
    if room=rm_game{
        alarm[0]=60
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var type_event=ds_map_find_value(async_load, "type");
var eventid = ds_map_find_value(async_load, "id");

if( eventid == global.clienttcp &amp;&amp; instance_exists(obj_client2)) or(!instance_exists(obj_client2))
{
switch(type_event){

    
    case network_type_connect:
        var socket=ds_map_find_value(async_load,"socket")
        //show_message(ds_map_find_value(async_load,"id"))
        player_list_add(socket);
        global.connectip=ds_map_find_value(async_load, "ip");
        alarm[2]=room_speed
        alarm[3]=-1
    break;
    
    case network_type_disconnect:
        var socket=ds_map_find_value(async_load,"socket")
        //findt he player and destroy him/her
        var findsocket=player_list_find_index(socket)
        if findsocket&gt;=0{
            player_list_delete(findsocket)
        }
    break;
    
    case network_type_data:
        var buffer=ds_map_find_value(async_load,"buffer")
        var socket=ds_map_find_value(async_load,"id")//id
        buffer_seek(buffer,buffer_seek_start,0)
        TPClast=ds_map_find_value(async_load, "size");
        if TPClast&gt;0{
            obj_server.TPCcount++
            ReceivePacket(buffer,socket,ds_map_find_value(async_load,"ip"));
        }
    break
    
}

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white)
draw_set_alpha(1)
draw_set_halign(fa_right)
draw_set_font(global.font0)
if instance_exists(obj_client2){
    draw_text_ext_transformed(room_width-5,25,"Ping: "+string(ping_reply),0,9999,.5,.5,0)
    
    
    //draw_text_ext_transformed(room_width-5,35,+string(TPCcount),0,9999,.5,.5,0)
    //draw_text_ext_transformed(room_width-5,45,+string(TPCmsg),0,9999,.5,.5,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
